{"version":3,"sources":["Components/AppBar/AppBar.js","Components/ToDoItem/ToDoItem.js","Components/ToDoList/ToDoList.js","Components/ToDoInput/ToDoInput.js","App.js","serviceWorker.js","index.js"],"names":["AppBar","class","Component","ToDoItem","this","props","title","handleDelete","handleEdit","className","type","onClick","icon","faTrash","faEdit","ToDoList","items","emptyList","map","item","key","id","ToDoInput","handleChange","handleSubmit","editItem","onSubmit","placeholder","value","onChange","faCheckCircle","faPlus","App","state","e","setState","target","preventDefault","newItem","console","log","newItems","filter","selectedItem","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.99da3d53.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass AppBar extends Component {\n  render() {\n    return (\n      <nav class=\"navbar navbar-light bg-light border-bottom shadow-sm\">\n        <span class=\"navbar-brand mb-0 h1\">Simple To Do</span>\n      </nav>\n    );\n  }\n}\n\nexport default AppBar;\n","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\n\nclass ToDoItem extends Component {\n  render() {\n    const { title, handleDelete, handleEdit } = this.props;\n    return (\n      <li className=\"list-group-item\">\n        <span className=\"d-inline-block lead text-break m-1\">{title}</span>\n\n        <div className=\"btn-group float-right m-1\">\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={handleDelete}\n          >\n            <FontAwesomeIcon icon={faTrash} />\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={handleEdit}\n          >\n            <FontAwesomeIcon icon={faEdit} />\n          </button>\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default ToDoItem;\n","import React, { Component } from \"react\";\nimport ToDoItem from \"../ToDoItem/ToDoItem\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nclass ToDoList extends Component {\n  render() {\n    const { items, emptyList, handleDelete, handleEdit } = this.props;\n\n    return (\n      <div className=\"container-fluid p-0 m-0\">\n        <span className=\"h1\">My tasks</span>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-danger btn-block mt-3 mb-3\"\n          onClick={emptyList}\n        >\n          Clear all tasks <FontAwesomeIcon icon={faTrash} className=\"mx-1\" />\n        </button>\n\n        <ul className=\"list-group mt-3 mb-3 shadow-sm\">\n          {items.map((item) => {\n            return (\n              <ToDoItem\n                key={item.id}\n                title={item.title}\n                handleDelete={() => handleDelete(item.id)}\n                handleEdit={() => handleEdit(item.id)}\n              ></ToDoItem>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default ToDoList;\n","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nclass ToDoInput extends Component {\n  render() {\n    const { item, handleChange, handleSubmit, editItem } = this.props;\n\n    return (\n      <form onSubmit={handleSubmit}>\n        <div class=\"input-group mb-3 shadow-sm\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Add a new task...\"\n            value={item}\n            onChange={handleChange}\n          ></input>\n          <div class=\"input-group-append\">\n            <button type=\"submit\" className=\"btn btn-primary\">\n              {editItem ? (\n                <FontAwesomeIcon icon={faCheckCircle} />\n              ) : (\n                <FontAwesomeIcon icon={faPlus} />\n              )}\n            </button>\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default ToDoInput;\n","import React, { Component, Fragment } from \"react\";\nimport AppBar from \"./Components/AppBar/AppBar\";\nimport ToDoList from \"./Components/ToDoList/ToDoList\";\nimport ToDoInput from \"./Components/ToDoInput/ToDoInput\";\n\nclass App extends Component {\n  state = {\n    id: 0,\n    items: [],\n    item: \"\",\n    editItem: false,\n  };\n\n  handleChange = (e) => {\n    this.setState({ item: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const newItem = {\n      id: this.state.id,\n      title: this.state.item,\n    };\n\n    console.log(newItem);\n\n    const newItems = [...this.state.items, newItem];\n\n    this.setState({\n      items: newItems,\n      item: \"\",\n      id: this.state.id + 1,\n      editItem: false,\n    });\n  };\n\n  handleDelete = (id) => {\n    const newItems = this.state.items.filter((item) => item.id !== id);\n    this.setState({\n      items: newItems,\n    });\n  };\n\n  handleEdit = (id) => {\n    const newItems = this.state.items.filter((item) => item.id !== id);\n\n    const selectedItem = this.state.items.find((item) => item.id === id);\n\n    console.log(selectedItem);\n\n    this.setState({\n      items: newItems,\n      item: selectedItem.title,\n      editItem: true,\n      id: id,\n    });\n  };\n\n  emptyList = () => {\n    this.setState({ items: [] });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <AppBar />\n        <div className=\"row p-0 m-0\">\n          <div className=\"col-lg-8 col-md-8 mx-auto mt-4\">\n            <ToDoInput\n              item={this.state.item}\n              handleChange={this.handleChange}\n              handleSubmit={this.handleSubmit}\n              editItem={this.state.editItem}\n            />\n            <ToDoList\n              items={this.state.items}\n              handleDelete={this.handleDelete}\n              handleEdit={this.handleEdit}\n              emptyList={this.emptyList}\n            />\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./Custom.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}